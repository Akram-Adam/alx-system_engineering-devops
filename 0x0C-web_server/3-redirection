#!/usr/bin/env bash

# Update package list and install Nginx
sudo apt-get update
sudo apt-get install nginx

# Ensure the /var/www/html directory exists and create an index.html file if it doesn't exist
if [ ! -d /var/www/html ]; then
  sudo mkdir -p /var/www/html
fi

if [ ! -f /var/www/html/index.html ]; then
  echo "<html><body><h1>hello world!</h1></body></html>" | sudo tee /var/www/html/index.html
fi

# Configure redirection in Nginx
NGINX_DEFAULT_CONF="/etc/nginx/sites-available/default"
if [ ! -f $NGINX_DEFAULT_CONF ]; then
  echo "Nginx default configuration file not found. Creating a new file."
  sudo tee $NGINX_DEFAULT_CONF > /dev/null <<EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;
    index index.html index.htm;

    server_name _;

    location / {
        try_files \$uri \$uri/ =404;
    }

    location /redirect_me {
        return 301 https://www.youtube.com/watch?v=QH2-TGUlwu4 permanent; # Replace http://example.com with the page you want to redirect to
    }
}
EOF
else
  # If the file exists, modify it to add the redirection
  sudo sed -i '/^}/i \
    location /redirect_me { \
        return 301 https://www.youtube.com/watch?v=QH2-TGUlwu4 permanent; \
    }' $NGINX_DEFAULT_CONF
fi

# Reload Nginx to apply the changes
sudo systemctl reload nginx

echo "Nginx has been successfully configured for redirection"







##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;
        server_name _;
        location /redirect_me {
        /treturn 301  https://www.youtube.com/watch?v=QH2-TGUlwu4 }
        location /redirect_me {
        /treturn 301  https://www.youtube.com/watch?v=QH2-TGUlwu4 }

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}
# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}